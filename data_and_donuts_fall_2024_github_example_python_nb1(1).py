# -*- coding: utf-8 -*-
"""data-and-donuts-fall-2024-github-example-python-nb1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yr3B6l3KxQVuQt44WigngjK8K3qKzFj7

# **Intro to Python (Data & Donuts Workshop)**

# **Intro to Python**

### **Using Google Colab and Jupyter Notebook development environments**

write some new text here
"""

print("hello")

"""Let's first start off by exploring the Google Colab environment which is based on the Jupyter IDE. Here we will practice creating new text blocks, creating new code blocks, and using Python print statements to view"""

print(1.1)

"""```


    


```

### **Import Python Packages**
"""

#import os, csv, requests, and json packages
import os
import csv
import requests
import json
import rasterio


#import package and assign alias
import pandas as pd

#import a specific module of a package
from datetime import datetime

"""```


    


```

### **Use PIP To Install A New Package That Is Not In Colab By Default**
"""

!pip install rasterio

#new packages that are installed with pip still need to be imported afterward in order to be used further down in the notebook

import rasterio

!pip list

"""```


    


```

### **Explore Python Object Types**
"""

#variables, object types, and comments

booleanexample = False

stringexample = "University of Texas at Austin"

newexamplestring = "this is the \"best\" workshop ever"

intexample = 1

floatexample = 1.1

tupleexample = ("Travis", "Williamson", "Hays")

listexample = ['Texas', 'Oklahoma', 'Louisiana', 'New Mexico', "Kansas", "Nebraska"]


ListExample = ['Austin', 'Oklahoma City', 'Baton Rouge', 'Santa Fe'] #notice that variable names are case sensitive!

listexampletwo = [1,2,3,4,5]

dictionaryexample = {"name":"Texas", "population":29000000, "capitol":"Austin", "majorcities":["Houston","Dallas","San Antonio","Austin","El Paso"]}

print(dictionaryexample['majorcities'][0])

"""```


    


```

### **Common Python Objects Methods**
"""

#modify string case
print(stringexample.upper())

#replace substring in string
print(stringexample.lower().replace("e","!"))

#split string into list by separating string at each occurence of substring
multiplesentencestring = "This is an example. It contains multiple sentences. Using the split method it can be seperated into a list of sentences."
sentences = multiplesentencestring.split(". ")
print(sentences)

#append item to list
sentences.append("This is an extra sentence.")
sentences.append("One more sentence.")
print(sentences)

#length of list
sentencecount = len(sentences)
print("Sentence count = " + str(sentencecount))

#convert numeric value to string
number = 1
numberstring = str(1)
print(number)

#convert number string to numeric value
newnumberstring = "2"
newnumberinteger = int(newnumberstring)
print(newnumberinteger + 1)

"""```


    


```

### **Test Out Python Operators**
"""

#operators
a = 1 + 1
b = 2 - 1
c = 2 * 2
d = 4 / 2
e = 13%5
f = str(1) + " that demonstrates concatenation using the '+' sign. " + "The state capitol of Texas is located in " + ListExample[0]

print("a=" + str(a))
print("b=" + str(b))
print("c=" + str(c))
print("d=" + str(d))
print("e=" + str(e))
print("f=" + f)

"""```


    


```

### **Try Using Conditional Statements**

Examples of conditional statements are provided below. Notice how a condition ends with a `:` and the lines of code to executed if a condition is met are indented. Indentation in Python is a key part of the syntax and must be carefully managed for code to run properly. It also helps with code readability and as compared to the `{}` used in other languages like JavaScript.
"""

numberofdatapointsfound = 20

if numberofdatapointsfound > 30:
  print("let's run the analysis")

elif numberofdatapointsfound == 30:
  print("just enough data")

else:
  print("we need to find more data")

print("this is the end of the code block.")

"""```


    


```

### **Practice Using If and Else with a Boolean Object**
"""

#this is an example of how to use boolean values
workshopisover = True

if workshopisover:
  print("see you tomorrow")
  print("the workshop is over")

else:
  print("let's keep going")

"""# **Breaktime (2:00pm - 2:10pm)**
```


    


```

# **Python Essentials (2:10pm - 3:00pm)**

In this section we will cover loops, error handling, functions, and retrieving data using the `requests` package

### **Looping Through Items in a List**
"""

#loops
listexample = [1,2,3,4,5,6]

for currentnum in listexample:
  currentnum +=  1000
  print(currentnum)

"""```


    


```

### **Using a While Loop**
"""

i = 1
while i < 10:
  print(str(i))

  #increment value of i by 1
  i += 1

"""ðŸ”¶ðŸ”¶ **CHALLENGE**: What might be risky about using while loops? What happens in the example above if you forget to include line 6 to increment the value of i each time through the loop?

```


    


```

### **Iterate Through Key Value Pairs in a Dictionary**
"""

ut = {"location":"Austin, TX", "color":"burnt orange", "founded":1883, 'mascot':'bevo'}

for k, v in ut.items():
  print(k + " - " + str(v))

"""```


    


```

### **Use Try and Except Statements to Gracefully Handle Errors**
"""

try:
  a = 1
  b = "two"
  c = a + b
  print(c)

except Exception as e:
  print(str(e))

print("this is an essential line of code that needs to be run every time")

"""```


    


```

### **Use the Requests Package to Retrieve Source of a Webpage**
"""

texasgeodataportalsource = requests.get('https://geodata.lib.utexas.edu/')
print(texasgeodataportalsource.text)

"""```


    


```

### **Retrieve Data in JSON Format from the City of Austin Data Portal**
"""

austinfoundpetresponse = requests.get("https://data.austintexas.gov/resource/kz4x-q9k5.json")
austinfoundpetdata = austinfoundpetresponse.text
austinfoundpetjson = json.loads(austinfoundpetdata)
print(austinfoundpetjson[0])

"""ðŸ”¶ðŸ”¶ **CHALLENGE**: Try modifying the code block above to print the looks_like value for the first item in austinfoundpetjson

```


    


```

### **Retrieve Data in CSV Format from the Texas Data Repository**
"""

#Dive characteristics of Weddell seals 2014-2016 from https://dataverse.tdl.org/file.xhtml?fileId=62725&datasetVersionId=1894
sealdivedatarequest = requests.get("https://dataverse.tdl.org/api/access/datafile/62725?gbrecs=true")
sealdivedata = sealdivedatarequest.text
print(sealdivedata)

"""```


    


```

### **Define Simple Function**
"""

def somefunction(val1, val2):
  newval = val1 * val2
  return newval

for i in range(1,50):
  print(somefunction(i,5))

"""```


    


```

### **Define A More Advanced Function That Retrieves Data**
"""

# This function utilizes the requests package to make an API to the Semantic Scholar REST endpoint at: https://api.semanticscholar.org/graph/v1/paper/search?query=nature&offset=100&limit=10
# Then the json package is used to parse the JSON response received from the API
# Each article result returned by the query will have titled and paperId values

querylist = []
querylist.append("location:\"austin\"&followers:>=5&repos:>=5")
querylist.append("location:\"seattle\"&followers:>=5&repos:>=5")
querylist.append("location:\"chicago\"&followers:>=5&repos:>=5")
querylist.append("location:\"topeka\"&followers:>=5&repos:>=5")
querylist.append("location:\"miami\"&followers:>=5&repos:>=5")


def api_query(query, resultsperpage):
  requesturl = "https://api.github.com/search/users?q="+ query +"&per_page=" + str(resultsperpage)
  response = requests.get(requesturl, headers={'Content-Type': 'application/json'})
  responsejson = json.loads(response.text)

  print(query + "    " + str(responsejson))


for query in querylist:
  api_query(query, "10")